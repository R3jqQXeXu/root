"LAMMPS WWW Site"_lws - "LAMMPS Documentation"_ld - "LAMMPS Commands"_lc :c

:link(lws,http://lammps.sandia.gov)
:link(ld,Manual.html)
:link(lc,Section_commands.html#comm)

:line

shape command :h3

[Syntax:]

shape I x y z :pre

I = atom type (see asterisk form below)
x = x diameter (distance units)
y = y diameter (distance units)
z = z diameter (distance units) :ul

[Examples:]

shape 1 1.0 1.0 1.0
shape * 3.0 1.0 1.0
shape 2* 3.0 1.0 1.0 :pre

[Description:]

Set the shape for all atoms of one or more atom types.  In LAMMPS,
particles that have a finite size are said to have a "shape", as
opposed to being a point mass.  The shape can be spherical or
aspherical, depending on whether the 3 shape values are the same or
different.  Shape values can also be set in the
"read_data"_read_data.html data file using the "Shapes" keyword.  See
the "units"_units.html command for what distance units to use.

The I index can be specified in one of two ways.  An explicit numeric
value can be used, as in the 1st example above.  Or a wild-card
asterisk can be used to set the shape for multiple atom types.  This
takes the form "*" or "*n" or "n*" or "m*n".  If N = the number of
atom types, then an asterisk with no numeric values means all types
from 1 to N.  A leading asterisk means all types from 1 to n
(inclusive).  A trailing asterisk means all types from n to N
(inclusive).  A middle asterisk means all types from m to n
(inclusive).

A line in a "data file"_read_data.html that follows the "Shapes"
keyword specifies shape using the same format as the arguments of the
shape command in an input script, except that no wild-card asterisk
can be used.  For example, under the "Shapes" section of a data file,
the line that corresponds to the 1st example above would be listed as

1 1.0 1.0 1.0 :pre

The shape values can be set to all 0.0, which means that atoms of that
type are point particles and not finite-size particles.  Some pair
styles and fixes and computes that operate on finite-size particles
allow for a mixture of finite-size and point particles.  See the doc
pages of individual commands for details.

Note that the shape command can only be used if the "atom
style"_atom_style.html requires per-type atom shape to be set.
Currently, only the {colloid}, {dipole}, and {ellipsoid} styles do.
The {granular} and {peri} styles also define finite-size spherical
particles, but their size is set on a per-particle basis.  These are
are defined in the data file read by the "read_data"_read_data.html
command, or set to default values by the
"create_atoms"_create_atoms.html command, or set to new values by the
"set diameter"_set.html command.

Dipoles use the atom shape to compute a moment of inertia for
rotational energy.  See the "pair_style dipole"_pair_dipole.html
command.  Only the 1st component of the shape is used since the
particles are assumed to be spherical.

Ellipsoids use the atom shape to compute a generalized inertia tensor.
For example, a shape setting of 3.0 1.0 1.0 defines a particle 3x
longer in x than in y or z and with a circular cross-section in yz.
Ellipsoids which are in fact spherical can be defined by setting all 3
shape components the same.

If you define a "hybrid atom style"_atom_style.html which includes one
(or more) sub-styles which require per-type shape and one (or more)
sub-styles which require per-atom diameter, then you must define both.
However, in this case the per-type shape will be ignored; only the
per-atom diameter will be used by LAMMPS.  This means you cannot
currently mix aspherical particles with per-atom diameter particles.

[Restrictions:]

This command must come after the simulation box is defined by a
"read_data"_read_data.html, "read_restart"_read_restart.html, or
"create_box"_create_box.html command.

All shapes must be defined before a simulation is run (if the atom
style requires shapes be set).

[Related commands:] none

[Default:] none
